name: Auto Release on Version Bump

on:
  push:
    branches:
      - main
      - release/*
    # Avoid infinite loops - don't trigger on tags
    tags-ignore:
      - '**'
    paths:
      - 'package.json'

permissions:
  contents: write
  id-token: write
  attestations: write
  packages: write

jobs:
  check-and-release:
    name: Check Version and Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Need full history

      - name: Read current version
        id: current
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if tag already exists
        id: tag_check
        run: |
          CUR="${{ steps.current.outputs.version }}"
          TAG="v$CUR"

          if [ -z "$CUR" ]; then
            echo "No current version found; abort."
            echo "release_required=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Checking if tag $TAG exists..."
          git fetch --tags --quiet

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists; skipping release."
            echo "release_required=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG does not exist; release needed."
            echo "release_required=true" >> "$GITHUB_OUTPUT"
            echo "tag=$TAG" >> "$GITHUB_OUTPUT"
            echo "version=$CUR" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js
        if: steps.tag_check.outputs.release_required == 'true'
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        if: steps.tag_check.outputs.release_required == 'true'
        run: npm ci

      - name: Run tests
        if: steps.tag_check.outputs.release_required == 'true'
        run: npm test

      - name: Build project
        if: steps.tag_check.outputs.release_required == 'true'
        run: npm run build

      - name: Generate changelog
        if: steps.tag_check.outputs.release_required == 'true'
        id: changelog
        run: |
          VERSION="${{ steps.tag_check.outputs.version }}"
          if [ -f CHANGELOG.md ]; then
            CHANGELOG_CONTENT=$(awk '/^## \[?'"$VERSION"'\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag' CHANGELOG.md || echo "")
            if [ -n "$CHANGELOG_CONTENT" ]; then
              {
                echo "CHANGELOG<<EOF"
                echo "$CHANGELOG_CONTENT"
                echo "EOF"
              } >> "$GITHUB_OUTPUT"
            else
              echo "CHANGELOG=Release $VERSION" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "CHANGELOG=Release $VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Build MCPB bundle
        if: steps.tag_check.outputs.release_required == 'true'
        run: npm run build:mcpb

      - name: Generate artifact attestation for MCPB bundle
        if: steps.tag_check.outputs.release_required == 'true'
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: '*.mcpb'

      - name: Setup npm authentication
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}

      - name: Dry-run npm publish
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        run: npm publish --access public --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        run: npm publish --access public

      - name: Create GitHub Release
        if: steps.tag_check.outputs.release_required == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_check.outputs.tag }}
          name: Release ${{ steps.tag_check.outputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ contains(steps.tag_check.outputs.version, '-') }}
          files: |
            *.mcpb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.tag_check.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.tag_check.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.tag_check.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        if: steps.tag_check.outputs.release_required == 'true' && !contains(steps.tag_check.outputs.version, '-')
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
